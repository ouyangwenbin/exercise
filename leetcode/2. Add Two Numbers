You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1 :
            return l2
        if not l2:
            return l1
        dummy=ListNode(0)
        p=dummy
        p1=l1
        p2=l2
        count=0
        while  p1 or p2:
            if  p1 and p2 :
                s=p1.val+p2.val+count
                count=s/10
                p.next=ListNode(s%10)
                p=p.next
                p1=p1.next
                p2=p2.next
            elif not p1:
                s=p2.val+count
                p.next=ListNode(s%10)
                count=s/10
                p=p.next
                p2=p2.next
            elif not p2:
                s=p1.val+count
                p.next=ListNode(s%10)
                count=s/10
                p=p.next
                p1=p1.next
        if count>0:
            p.next=ListNode(count)
        return dummy.next
